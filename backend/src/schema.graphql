scalar DateTime
scalar Upload

type Query {
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  me: User
  allPosts: [ImagePost!]!
  allVideoPosts: [VideoPost!]!
  queryImagePost(id: ID!): ImagePost!
  postComments(id: ID!): [Comment!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, content: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!
  uploadImagePost(caption: String, title: String!, image: Upload!): ImagePost!
  uploadVideoPost(caption: String, title: String!, video: Upload!): VideoPost!
  editImagePost(id: ID!, caption: String, title: String!): ImagePost!
  deleteImagePost(id: ID!): ImagePost
  deleteVideoPost(id: ID!): VideoPost
  addComment(id: ID!, text: String!): Comment!
  # createImagePost(caption: String, image: String!, largeImage: String!): ImagePost!
}

type Subscription {
  feedSubscription: Post
}

type AuthPayload {
  token: String!
  user: User!
}

# type CommentCreateInput {
#   id: ID!
#   text: String!
#   post: 
# }

type User {
  id: ID!
  email: String!
  name: String!
  posts: [Post!]!
  imagePosts: [ImagePost!]!
  videoPosts: [VideoPost!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  published: Boolean!
  title: String!
  content: String!
  author: User!
}

type ImagePost {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  caption: String
  image: String!
  user: User!
  comments: [Comment!]!
}

type VideoPost {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  caption: String
  video: String!
  user: User!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  text: String!
  user: User!
  imagePost: ImagePost!
}